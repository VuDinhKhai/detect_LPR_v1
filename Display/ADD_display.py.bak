# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ADD1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import atexit
from PyQt5 import QtCore, QtGui, QtWidgets
import Setup_main as main_Window
import sys
from PyQt5.QtWidgets import QApplication, QComboBox, QMainWindow
from PyQt5.QtWidgets import QWidget, QVBoxLayout
from PyQt5.QtGui import QStandardItemModel
from PyQt5.QtCore import Qt
import sql as aiptsql
import sys
import add
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = ''
# class CheckableComboBox(QComboBox):
#     def __init__(self):
#         super(CheckableComboBox, self).__init__()
#         self.view().pressed.connect(self.handle_item_pressed)
#         self.setModel(QStandardItemModel(self))
#         for i in range(self.count()):
#             item = self.model().item(i)
#             item.setCheckable(True)
#             item.setCheckState(Qt.Checked)
#             self.check_items()

#     # when any item get pressed
#     def handle_item_pressed(self, index):

#         # getting which item is pressed
#         item = self.model().itemFromIndex(index)

#         # make it check if unchecked and vice-versa
#         if item.checkState() == Qt.Checked:
#             item.setCheckState(Qt.Unchecked)
#         else:
#             item.setCheckState(Qt.Checked)

#         # calling method
#         self.check_items()

#     # method called by check_items
#     def item_checked(self, index):

#         # getting item at index
#         item = self.model().item(index, 0)

#         # return true if checked else false
#         return item.checkState() == Qt.Checked

#         # calling method
#     def check_items(self):
#         # blank list
#         checkedItems = []

#         # traversing the items
#         for i in range(self.count()):

#             # if item is checked add it to the list
#             if self.item_checked(i):
#                 checkedItems.append(i)

#         # call this method
#         self.update_labels(checkedItems)
#         return checkedItems

#     # method to update the label
#     def update_labels(self, item_list):
#         n = ''
#         count = 0
#         # traversing the list
#         for i in item_list:
#             # if count value is 0 don't add comma
#             if count == 0:
#                 n += ' % s' % i
#             # else value is greater than 0
#             # add comma
#             else:
#                 n += ', % s' % i

#             # increment count
#             count += 1


#         # loop
#         for i in range(self.count()):

#             # getting label
#             text_label = self.model().item(i, 0).text()
#             # default state
#             if text_label.find('-') >= 0:
#                 text_label = text_label.split('-')[0]

#             # shows the selected items
#             item_new_text_label = text_label + ' - Chọn list số : ' + n
#             # item_new_text_label = text_label
#             # setting text to combo box
#             self.setItemText(i,text_label)
#         # return item_list
#     def default_setup(self):
#         for i in range(self.count()):
#             item = self.model().itemFromIndex(i)
#             print(item)
#             if item.checkState() == Qt.UnChecked:
#                 item.setCheckState(Qt.checked)
#     # flush
#     # sys.stdout.flush()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        global ui
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(11, -1, -1, -1)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setStyleSheet("image: url(:/newPrefix/image/2.png);")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.Button_quaylai = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.Button_quaylai.setFont(font)
        self.Button_quaylai.setObjectName("Button_quaylai")
        self.verticalLayout.addWidget(self.Button_quaylai, 0, QtCore.Qt.AlignRight)
        # self.Button_quaylai.clicked.connect(self.button_thoat)

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setMaximumSize(QtCore.QSize(16777215, 100))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.label.setFont(font)
        self.label.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.label.setToolTipDuration(1)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)


        self.line = QtWidgets.QFrame(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.line.setFont(font)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")

        # self.comboBox_listxe = QtWidgets.QComboBox(self.centralwidget)
        # self.comboBox_listxe.setMaximumSize(QtCore.QSize(16777215, 60))
        # font = QtGui.QFont()
        # font.setFamily("Times New Roman")
        # font.setPointSize(14)
        # font.setBold(True)
        # font.setWeight(75)
        # self.comboBox_listxe.setFont(font)
        # self.comboBox_listxe.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        # self.comboBox_listxe.setLayoutDirection(QtCore.Qt.LeftToRight)
        # self.comboBox_listxe.setStyleSheet("background-color: rgb(255, 255, 255);")
        # self.comboBox_listxe.setObjectName("comboBox_listxe")
        self.comboBox_listxe = add.CheckableComboBox()
        self.comboBox_listxe.setMaximumSize(QtCore.QSize(16777215, 60))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.comboBox_listxe.setFont(font)
        self.comboBox_listxe.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.comboBox_listxe.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.comboBox_listxe.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_listxe.setObjectName("comboBox_listxe")
        self.horizontalLayout_3.addWidget(self.comboBox_listxe)
        # self.comboBox_listxe.currentIndexChanged.connect(self.select_combobox_listxe)
        
        self.Button_xoalistxe = QtWidgets.QPushButton(self.centralwidget)
        self.Button_xoalistxe.setMaximumSize(QtCore.QSize(100, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.Button_xoalistxe.setFont(font)
        self.Button_xoalistxe.setStyleSheet("background-color: rgb(255, 170, 0);")
        self.Button_xoalistxe.setAutoDefault(True)
        self.Button_xoalistxe.setDefault(True)
        self.Button_xoalistxe.setObjectName("Button_xoalistxe")
        self.horizontalLayout_3.addWidget(self.Button_xoalistxe)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        # self.comboBox_listxe.currentIndexChanged.connect(self.select_combobox_listxe)
        # self.Button_xoalistxe.clicked.connect(self.button_xoalistxe)


        # self.horizontalLayout = QtWidgets.QHBoxLayout()
        # self.horizontalLayout.setObjectName("horizontalLayout")
        # self.Edit_addlist = QtWidgets.QTextEdit(self.centralwidget)
        # sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        # sizePolicy.setHorizontalStretch(0)
        # sizePolicy.setVerticalStretch(0)
        # sizePolicy.setHeightForWidth(self.Edit_addlist.sizePolicy().hasHeightForWidth())
        # self.Edit_addlist.setSizePolicy(sizePolicy)
        # self.Edit_addlist.setMaximumSize(QtCore.QSize(16777215, 60))
        # font = QtGui.QFont()
        # font.setFamily("Times New Roman")
        # font.setPointSize(14)
        # self.Edit_addlist.setFont(font)
        # self.Edit_addlist.setObjectName("Edit_addlist")
        # self.horizontalLayout.addWidget(self.Edit_addlist)


        # self.line_2 = QtWidgets.QFrame(self.centralwidget)
        # font = QtGui.QFont()
        # font.setFamily("Times New Roman")
        # font.setPointSize(14)
        # self.line_2.setFont(font)
        # self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        # self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        # self.line_2.setObjectName("line_2")
        # self.horizontalLayout.addWidget(self.line_2)


        # self.Button_them = QtWidgets.QPushButton(self.centralwidget)
        # self.Button_them.setMaximumSize(QtCore.QSize(200, 50))
        # font = QtGui.QFont()
        # font.setFamily("Times New Roman")
        # font.setPointSize(14)
        # font.setBold(True)
        # font.setWeight(75)
        # self.Button_them.setFont(font)
        # self.Button_them.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        # self.Button_them.setLayoutDirection(QtCore.Qt.LeftToRight)
        # self.Button_them.setStyleSheet("background-color: rgb(0, 255, 127);")
        # self.Button_them.setObjectName("Button_them")
        # self.horizontalLayout.addWidget(self.Button_them)
        # self.Button_them.clicked.connect(self.them_list_xe)

        # self.verticalLayout.addLayout(self.horizontalLayout)
        # self.line_3 = QtWidgets.QFrame(self.centralwidget)
        # font = QtGui.QFont()
        # font.setFamily("Times New Roman")
        # font.setPointSize(14)
        # self.line_3.setFont(font)
        # self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        # self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        # self.line_3.setObjectName("line_3")
        # self.verticalLayout.addWidget(self.line_3)


        self.label_hiendanhsach = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_hiendanhsach.setFont(font)
        self.label_hiendanhsach.setText("")
        self.label_hiendanhsach.setObjectName("label_hiendanhsach")
        self.verticalLayout.addWidget(self.label_hiendanhsach)


        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.line_5.setFont(font)
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.verticalLayout.addWidget(self.line_5)


        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 200))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.label_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)


        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.line_4.setFont(font)
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.verticalLayout.addWidget(self.line_4)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")

        self.comboBox_list_bienso = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_list_bienso.setMaximumSize(QtCore.QSize(16777215, 60))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.comboBox_list_bienso.setFont(font)
        self.comboBox_list_bienso.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.comboBox_list_bienso.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.comboBox_list_bienso.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_list_bienso.setObjectName("comboBox_list_bienso")
        self.horizontalLayout_4.addWidget(self.comboBox_list_bienso)
        self.Button_xoabienso = QtWidgets.QPushButton(self.centralwidget)
        self.Button_xoabienso.setMaximumSize(QtCore.QSize(100, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.Button_xoabienso.setFont(font)
        self.Button_xoabienso.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.Button_xoabienso.setAutoDefault(True)
        self.Button_xoabienso.setDefault(True)
        self.Button_xoabienso.setObjectName("Button_xoabienso")
        self.horizontalLayout_4.addWidget(self.Button_xoabienso)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        # self.comboBox_list_bienso.currentIndexChanged.connect(self.select_combobox_listbienso)
        # self.Button_xoabienso.clicked.connect(self.button_xoa_bienso)


        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.Edit_bienso = QtWidgets.QTextEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Edit_bienso.sizePolicy().hasHeightForWidth())
        self.Edit_bienso.setSizePolicy(sizePolicy)
        self.Edit_bienso.setMaximumSize(QtCore.QSize(16777215, 60))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.Edit_bienso.setFont(font)
        self.Edit_bienso.setObjectName("Edit_bienso")
        self.horizontalLayout_2.addWidget(self.Edit_bienso)


        self.line_6 = QtWidgets.QFrame(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.line_6.setFont(font)
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.horizontalLayout_2.addWidget(self.line_6)


        self.Button_luu = QtWidgets.QPushButton(self.centralwidget)
        self.Button_luu.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.Button_luu.setFont(font)
        self.Button_luu.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.Button_luu.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Button_luu.setStyleSheet("background-color: rgb(85, 170, 255);")
        self.Button_luu.setObjectName("Button_luu")
        self.horizontalLayout_2.addWidget(self.Button_luu)
        # self.Button_luu.clicked.connect(self.them_bienso)


        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.label_hienbienso = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_hienbienso.setFont(font)
        self.label_hienbienso.setText("")
        self.label_hienbienso.setObjectName("label_hienbienso")
        self.verticalLayout.addWidget(self.label_hienbienso)
        MainWindow.setCentralWidget(self.centralwidget)
        # self.load_data_to_combobox_listxe()
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ADD"))
        self.Button_quaylai.setText(_translate("MainWindow", "QUAY LẠI"))
        self.label.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt;\">NHẬP DANH SÁCH QUẢN LÝ XE</span></p></body></html>"))
        self.Button_xoalistxe.setText(_translate("MainWindow", "XÓA"))
        # self.Button_them.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        # self.Button_them.setText(_translate("MainWindow", "THÊM"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt;\">CHỌN DANH SÁCH QUẢN LÝ XE , NHẬP BIỂN SỐ XE CẦN NHẬN DIỆN</span></p></body></html>"))
        self.Button_xoabienso.setText(_translate("MainWindow", "XÓA"))
        self.Button_luu.setText(_translate("MainWindow", "LƯU"))

    # def button_xoalistxe(self):
    #     index = self.comboBox_listxe.check_items()
    #     # index = self.comboBox_listxe.findText(selected_item)
    #     cont = 0
    #     print("index = " + str(index))
    #     if len(index) > 0:
    #         for i in index:
    #             item_text = self.comboBox_listxe.itemText(i-cont)
    #             self.comboBox_listxe.removeItem(i - cont)
    #             print("item_text = ", item_text)
    #             aiptsql.remove_list(item_text)
    #             cont = cont + 1
    #             # ID_list = None
    #             # sql2 = "SELECT id FROM listsvehicle WHERE name = %s"
    #             # cursor.execute(sql2, (item_text,))
    #             # ID_list = cursor.fetchone()
    #             # if ID_list is not None:
    #             #     ID_list = ID_list[0]
                    
    #             #     sql = "DELETE FROM cameradetail WHERE list_vehicle_id = %s"
    #             #     values = (ID_list,)
    #             #     cursor.execute(sql, values)
    #             #     self.db.commit()

    #             #     id_vehicles = None
    #             #     sql7 = "SELECT vehicle_id FROM listvehicledetail WHERE list_vehicle_id = %s"
    #             #     values = (ID_list,)
    #             #     cursor.execute(sql7, values)
    #             #     id_vehicles = cursor.fetchall()
    #             #     if id_vehicles is not None:
    #             #         for id_vehicle in id_vehicles:
    #             #             id_vehicle = id_vehicle[0]
    #             #             sql8 = "DELETE FROM vehicles WHERE id = %s"
    #             #             values = (id_vehicle,)
    #             #             cursor.execute(sql8, values)
    #             #             self.db.commit()

    #             #     sql3 = "DELETE FROM listvehicledetail WHERE list_vehicle_id = %s"
    #             #     values = (ID_list,)
    #             #     cursor.execute(sql3, values)
    #             #     self.db.commit()

    #             #     sql4 = "DELETE FROM records WHERE list_vehicle_id = %s"
    #             #     values = (ID_list,)
    #             #     cursor.execute(sql4, values)
    #             #     self.db.commit()
    #             #     ID_camera = None
    #             #     sql5 = "SELECT camera_id FROM cameradetail WHERE list_vehicle_id = %s"
    #             #     cursor.execute(sql5, (ID_list,))
    #             #     ID_camera = cursor.fetchone()
    #             #     if ID_camera is not None:
    #             #         ID_camera = ID_camera[0]

    #             #         sql6 = "DELETE FROM cameras WHERE id = %s"
    #             #         values = (ID_camera,)
    #             #         cursor.execute(sql6, values)
    #             #         self.db.commit()

    #             #     sql1 = "DELETE FROM listsvehicle WHERE name = %s"
    #             #     values = (item_text,)
    #             #     cursor.execute(sql1, values)
    #             #     self.db.commit()
    #                 # cont = cont + 1
    #             # self.label_hiendanhsach.setText("       Đã xóa danh sách : " + selected_item)
        
        


    # def button_xoa_bienso(self):
    #     selected_item = self.comboBox_list_bienso.currentText()
    #     index = self.comboBox_list_bienso.findText(selected_item)
    #     if index != -1:
    #         self.comboBox_list_bienso.removeItem(index)
    #     self.label_hienbienso.setText("         Đã xóa biển số  : " + selected_item)
        
    #     aiptsql.remove_LP(selected_item)
        
            # sql1 = "DELETE FROM records WHERE vehicle_id = %s"
            # values = (ID_vehicle,)
            # cursor.execute(sql1, values)
            # self.db.commit()

            # sql = "DELETE FROM vehicles WHERE id = %s"
            # values = (ID_vehicle,)
            # cursor.execute(sql, values)
            # self.db.commit()

            

            # print("vehicle: %s" % ID_vehilce)
            # ID_vehilce = ID_vehilce[0]
            # selected_item1 = self.comboBox_listxe.currentText()
            # ID_list_ = None
            # sql2 = "SELECT id FROM listsvehicle WHERE name = %s"
            # cursor.execute(sql2, (selected_item1,))
            # ID_list_ = cursor.fetchall()
            # if ID_list_ is not None:
            #     for ID_list in ID_list_:
            #         ID_list = ID_list[0]
            #         print("ID list is: %s" % ID_list)
            #         ID_vehicle1 = None
            #         sql3 = "SELECT vehicle_id FROM listvehicledetail WHERE list_vehicle_id = %s AND vehicle_id = %s"
            #         values = (ID_list,ID_vehilce)
            #         cursor.execute(sql3, values)
            #         ID_vehicle1_ = cursor.fetchone()
            #         if ID_vehicle1_:
            #             ID_vehicle1 = ID_vehicle1_[0]
            #             print("Vehicle %s" % ID_vehicle1 )
            #             sql4 = "DELETE FROM listvehicledetail WHERE list_vehicle_id = %s AND vehicle_id = %s"
            #             values = (ID_list,ID_vehilce)
            #             cursor.execute(sql4, values)
            #             self.db.commit()

            #             sql = "DELETE FROM vehicles WHERE id = %s"
            #             values = (ID_vehicle1,)
            #             cursor.execute(sql, values)
            #             self.db.commit()


    # def load_data_to_combobox_listxe(self):
    #     results = aiptsql.get_full_name_From_listsvehicle_status_True()
    #     if results is not None:
    #         for result in results:
    #             self.comboBox_listxe.addItem(result[0])
        
    #     results = aiptsql.get_full_LP_from_vehicle_status_true()
    #     if results is not None:
    #         for result in results:
    #             self.comboBox_list_bienso.addItem(result[0])

    # def select_combobox_listbienso(self):
    #     selected_item = self.comboBox_list_bienso.currentText()
    #     self.label_hienbienso.setText(f"{selected_item}")


    # def them_list_xe(self):
    #     self.db = mysql.connector.connect(user='vehicle-identification', password='aipt2023',
    #                          host='192.168.1.89', database='vehicle-identification')
    #     cursor = self.db.cursor()
    #     value = self.Edit_addlist.toPlainText()
    #     if len(value) !=0:
    #         found = True
    #         for index in range(self.comboBox_listxe.count()):
    #             item_text = self.comboBox_listxe.itemText(index)
    #             print("itemText  = " + item_text)
    #             print("value = " + value)
    #             if item_text == value:
    #                 found = False
    #                 break
            
    #         if found:
    #             self.comboBox_listxe.addItem(value)
    #             self.label_hiendanhsach.setText("       Đã thêm danh sách : " + value)
    #             sql = "INSERT INTO listsvehicle (name) VALUES (%s)"
    #             values = (value,)
    #             cursor.execute(sql, values)
    #             self.db.commit()
    
    # def button_thoat(self):
    #     # self.save_data_on_exit()
    #     global ui
    #     ui = main_Window._main_()
    #     MainWindow.close()
    # def select_combobox_listxe(self):
    #     # selected_item = self.comboBox_listxe.currentText()
    #     self.label_hiendanhsach.clear()
    #     index = self.comboBox_listxe.check_items()
    #     # print("index" + str(index))      # index[0, 1, 2, 3, 4]
    #     hiendanhsach = "" 
    #     for i in index:
    #         # print("i = {0}".format(i))     
    #         # i = 0
    #         # i = 1
    #         # i = 2
    #         # i = 3
    #         # i = 4
    #         text_label = self.comboBox_listxe.model().item(i, 0).text()
    #         # print("text label : " + str(text_label))
    #         hiendanhsach = hiendanhsach + text_label +  " - "
    #     self.label_hiendanhsach.setText(f"{hiendanhsach}")


        # print("{selected item} selected : {}"+ selected_item)
        # self.comboBox_list_bienso.clear()
        # db = mysql.connector.connect(user='vehicle-identification', password='aipt2023',
        #                      host='192.168.1.89', database='vehicle-identification')
        # cursor = db.cursor(buffered=True)
        # ID_list_ = None
        # sql2 = "SELECT id FROM listsvehicle WHERE name = %s"
        # cursor.execute(sql2, (selected_item,))
        # ID_list_ = cursor.fetchall()
        # for ID_list in ID_list_:
        #     ID_list = ID_list[0]
            
        #     ID_vehicle = None
        #     sql5 = "SELECT vehicle_id FROM listvehicledetail WHERE list_vehicle_id = %s"
        #     cursor.execute(sql5, (ID_list,))
        #     ID_vehicle_ = cursor.fetchall()
        #     for ID_vehicle in ID_vehicle_:
        #         ID_vehicle = ID_vehicle[0]
        #         cursor = db.cursor(buffered=True)
        #         sql3 = "SELECT license_plate FROM vehicles WHERE id = %s"
        #         cursor.execute(sql3, (ID_vehicle,))
        #         results = cursor.fetchall()

        #         for result in results:
        #             self.comboBox_list_bienso.addItem(result[0])
        

    # def them_bienso(self):
    #     value = self.Edit_bienso.toPlainText()
    #     index1 = self.comboBox_listxe.check_items()
    #     if len(value) !=0:
    #         found = True
    #         for index in range(self.comboBox_list_bienso.count()):
    #             item_text = self.comboBox_list_bienso.itemText(index)
    #             if item_text == value:
    #                 found = False
    #                 break
    #         print("index : " + str(index1))
    #         if found and len(index1) > 0:
    #             self.comboBox_list_bienso.addItem(value)
    #             self.label_hienbienso.setText("         Đã thêm biển số : " + value)
    #             aiptsql.add_LP(value)
    #             # index3 = self.comboBox_listxe.check_items()
    #             for i in index1:
    #                 text_label = self.comboBox_listxe.model().item(i, 0).text()

    #                 aiptsql.add_vehicledetail(value, text_label)


    # def save_data_on_exit(self):
    #     self.db = mysql.connector.connect(user='vehicle-identification', password='aipt2023',
    #                          host='192.168.1.89', database='vehicle-identification')
    #     cursor = self.db.cursor(buffered=True)
    #     selected_items = [self.comboBox_listxe.itemText(index) for index in range(self.comboBox_listxe.count())]

    #     for item in selected_items:
    #         # Thực hiện truy vấn SQL để lưu dữ liệu vào cơ sở dữ liệu
    #         sql = "INSERT INTO listsvehicle (name) VALUES (%s)"
    #         values = (item,)
    #         cursor.execute(sql, values)
    #     selected_items = [self.comboBox_list_bienso.itemText(index) for index in range(self.comboBox_list_bienso.count())]

    #     for item in selected_items:
    #         # Thực hiện truy vấn SQL để lưu dữ liệu vào cơ sở dữ liệu
    #         sql = "INSERT INTO vehicles (license_plate) VALUES (%s)"
    #         values = (item,)
    #         cursor.execute(sql, values)
    #     # Lưu các thay đổi vào cơ sở dữ liệu
    #     db.commit()

    #     # Đóng cơ sở dữ liệu
    #     db.close()

# def main():
#     global ui
#     ui = Ui_MainWindow()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
# if __name__ == "__main__":
#     main()
#     sys.exit(app.exec_())
    
